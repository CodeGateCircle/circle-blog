---
import path from "node:path";
import License from "@components/misc/License.astro";
import Markdown from "@components/misc/Markdown.astro";
import I18nKey from "@i18n/i18nKey";
import { i18n } from "@i18n/translation";
import MainGridLayout from "@layouts/MainGridLayout.astro";
import { getMemberList } from "@utils/member-utils";
import { getDir, getPostUrlBySlug } from "@utils/url-utils";
import { Icon } from "astro-icon/components";
import { licenseConfig } from "src/config";
import ImageWrapper from "../../components/misc/ImageWrapper.astro";
import PostMetadata from "../../components/PostMeta.astro";
import { profileConfig, siteConfig } from "../../config";
import { formatDateToYYYYMMDD } from "../../utils/date-utils";

export async function getStaticPaths() {
	const blogEntries = await getMemberList();
	return blogEntries.map((member) => ({
		params: { slug: member.slug },
		props: { member },
	}));
}

const { member } = Astro.props;
const { Content, headings } = await member.render();

const { remarkPluginFrontmatter } = await member.render();

// const jsonLd = {
// 	"@context": "https://schema.org",
// 	"@type": "BlogPosting",
// 	headline: member.data.title,
// 	description: member.data.description || member.data.title,
// 	author: {
// 		"@type": "Person",
// 		name: profileConfig.name,
// 		url: Astro.site,
// 	},
// 	datePublished: formatDateToYYYYMMDD(new Date()),
// 	inLanguage: member.data.lang
// 		? member.data.lang.replace("_", "-")
// 		: siteConfig.lang.replace("_", "-"),
// 	// TODO include cover image here
// };
---
<MainGridLayout banner={member.data.avatar} title={member.data.name} lang={member.data.lang} setOGTypeArticle={true} headings={headings}>
    <!-- <script is:inline slot="head" type="application/ld+json" set:html={JSON.stringify(jsonLd)}></script> -->
    <div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative mb-4">
        <div id="post-container" class:list={["card-base z-10 px-6 md:px-9 pt-6 pb-4 relative w-full ",
            {}
        ]}>
            <!-- word count and reading time -->
            <div class="flex flex-row text-black/30 dark:text-white/30 gap-5 mb-3 transition onload-animation">
                <div class="flex flex-row items-center">
                    <div class="transition h-6 w-6 rounded-md bg-black/5 dark:bg-white/10 text-black/50 dark:text-white/50 flex items-center justify-center mr-2">
                        <Icon name="material-symbols:notes-rounded"></Icon>
                    </div>
                    <div class="text-sm">{remarkPluginFrontmatter.words} {" " + i18n(I18nKey.wordsCount)}</div>
                </div>
                <div class="flex flex-row items-center">
                    <div class="transition h-6 w-6 rounded-md bg-black/5 dark:bg-white/10 text-black/50 dark:text-white/50 flex items-center justify-center mr-2">
                        <Icon name="material-symbols:schedule-outline-rounded"></Icon>
                    </div>
                    <div class="text-sm">
                        {remarkPluginFrontmatter.minutes} {" " + i18n(remarkPluginFrontmatter.minutes === 1 ? I18nKey.minuteCount : I18nKey.minutesCount)}
                    </div>
                </div>
            </div>

            <!-- title -->
            <div class="relative onload-animation">
                <div
                    data-pagefind-body data-pagefind-weight="10" data-pagefind-meta="title"
                    class="transition w-full block font-bold mb-3
                    text-3xl md:text-[2.25rem]/[2.75rem]
                    text-black/90 dark:text-white/90
                    md:before:w-1 before:h-5 before:rounded-md before:bg-[var(--primary)]
                    before:absolute before:top-[0.75rem] before:left-[-1.125rem]
                ">
                    {member.data.name}
                </div>
            </div>

            <!-- metadata -->
            <div class="onload-animation">
                {!member.data.avatar && <div class="border-[var(--line-divider)] border-dashed border-b-[1px] mb-5"></div>}
            </div>

            <!-- always show cover as long as it has one -->

            {member.data.avatar &&
                <ImageWrapper id="post-cover" src={member.data.avatar} basePath={path.join("content/members/", getDir(member.id))} class="mb-8 rounded-xl banner-container onload-animation"/>
            }


            <Markdown class="mb-6 markdown-content onload-animation">
                <Content />
            </Markdown>

            <!-- {licenseConfig.enable && <License title={member.data.title} slug={member.slug} pubDate={member.data.published} class="mb-6 rounded-xl license-container onload-animation"></License>} -->

        </div>
    </div>
</MainGridLayout>
